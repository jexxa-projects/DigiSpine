version: "3.8"

services:

  kafka-connect:
    image: confluentinc/cp-kafka-connect:latest


    healthcheck:
      test: ["CMD-SHELL", "curl -s -o /dev/null -w %{http_code} http://localhost:8083/connectors"]
      interval: 10s
      timeout: 10s
      retries: 3

    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'localhost:9092'
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/usr/share/filestream-connectors
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-producer
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
    command:
      - bash
      - -c
      - |
        /etc/confluent/docker/run &
        echo "Waiting for Kafka Connect to start listening on localhost ⏳"
        while true 
        do
          curl_status=$$(curl -s -o /dev/null -w %{http_code} http://localhost:8083/connectors)
          echo -e $$(date) " Kafka Connect listener HTTP state: " $$curl_status " (waiting for 200)"
          if [ $$curl_status -eq 200 ] ; then
            break
          fi

          sleep 5
        done
        
        echo -e "\n--\n+> Start producing Data"
        while true; do echo {\"zeit\":$$(date +%s), \"temperaturInGradCelsius\": $$(shuf -i950-1400 -n1)}; sleep 1; done |  kafka-avro-console-producer --bootstrap-server localhost:9092 --topic dataproduct_avro    --property schema.registry.url=http://localhost:18085/ --property value.subject.name.strategy=io.confluent.kafka.serializers.subject.TopicRecordNameStrategy --property value.schema='{ "type": "record", "name": "Hochofen04TemperaturEvent", "doc": "Ein Event, das eine Temperaturmessung im Hochofen darstellt.", "fields": [ {"name": "zeit", "type": "double", }, {"name": "temperaturInGradCelsius", "type": "float",  }] }'

